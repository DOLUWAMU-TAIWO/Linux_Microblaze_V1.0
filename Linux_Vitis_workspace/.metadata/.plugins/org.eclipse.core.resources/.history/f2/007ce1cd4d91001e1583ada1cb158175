#include "xparameters.h"
#include "xgpio.h"
#include "xil_printf.h"

// Parameters for the peripherals
#define BUTTONS_DEVICE_ID XPAR_AXI_GPIO_BUTTON_DEVICE_ID
#define SEVEN_SEGMENT_DEVICE_ID XPAR_AXI_GPIO_SEVEN_DEVICE_ID
#define UART_DEVICE_ID XPAR_AXI_UARTLITE_0_BASEADDR

XGpio ButtonInst, SevenSegmentInst;

int InitializeGpio(XGpio *InstancePtr, u16 DeviceId, u32 DirectionMask);
void UpdateSevenSegment(u32 number);
void Print(const char *str);

int main() {
    int Status;
    u32 button_data, seven_segment_value = 0;

    // Initialize Button
    Status = InitializeGpio(&ButtonInst, BUTTONS_DEVICE_ID, 0xFFFFFFFF); // All inputs
    if (Status != XST_SUCCESS) {
        xil_printf("Button Initialization Failed\r\n");
        return XST_FAILURE;
    }

    // Initialize Seven Segment
    Status = InitializeGpio(&SevenSegmentInst, SEVEN_SEGMENT_DEVICE_ID, 0x00); // All outputs
    if (Status != XST_SUCCESS) {
        xil_printf("7-Segment Display Initialization Failed\r\n");
        return XST_FAILURE;
    }

    while (1) {
        button_data = XGpio_DiscreteRead(&ButtonInst, 1);
        if (button_data != 0) {
            seven_segment_value = (seven_segment_value + 1) % 10;
            UpdateSevenSegment(seven_segment_value);
            xil_printf("Button press detected: Updating seven segment to display %d\r\n", seven_segment_value);
        }
        // Replace this delay with a proper debounce mechanism
        for (int i = 0; i < 1000000; i++);
    }

    return XST_SUCCESS;
}

int InitializeGpio(XGpio *InstancePtr, u16 DeviceId, u32 DirectionMask) {
    int Status = XGpio_Initialize(InstancePtr, DeviceId);
    if (Status != XST_SUCCESS) {
        return XST_FAILURE;
    }
    XGpio_SetDataDirection(InstancePtr, 1, DirectionMask);
    return XST_SUCCESS;
}

void UpdateSevenSegment(u32 number) {
    // Define a mapping from number to the segments (for a common anode display)
    static const u32 segment_map[10] = {
        0b11000000, // 0
        0b11111001, // 1
        0b10100100, // 2
        // ... and so on for 3 to 9
    };
    if (number < 10) {
        XGpio_DiscreteWrite(&SevenSegmentInst, 1, ~segment_map[number]); // Use bitwise NOT for common anode
    }
}

void Print(const char *str) {
    while (*str) {
        XUartLite_SendByte(UART_DEVICE_ID, *str++);
    }
}
