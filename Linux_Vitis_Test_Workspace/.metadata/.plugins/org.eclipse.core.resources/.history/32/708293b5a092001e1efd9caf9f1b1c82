#include "xparameters.h"
#include "xgpio.h"
#include "xil_printf.h"

// Device IDs and Channel Definitions
#define SWITCH_DEVICE_ID XPAR_AXI_GPIO_SWITCH_DEVICE_ID
#define LED_DEVICE_ID XPAR_AXI_GPIO_LEDS_DEVICE_ID
#define BUTTON_DEVICE_ID XPAR_AXI_GPIO_BUTTONS_DEVICE_ID
#define RGB_LED_DEVICE_ID XPAR_AXI_GPIO_RGB_DEVICE_ID
#define SEVEN_SEG_DEVICE_ID XPAR_AXI_GPIO_SEVEN_DEVICE_ID

#define SWITCH_CHANNEL 1
#define LED_CHANNEL 1
#define BUTTON_CHANNEL 1
#define RGB_LED_CHANNEL 1
#define SEVEN_SEG_CHANNEL 1

#define NUM_SWITCHES 16
#define NUM_BUTTONS 4   // Assuming 4 buttons for simplicity
#define NUM_RGB_LEDS 3  // Assuming RGB LED has 3 channels (R, G, B)

XGpio SwitchGpio, LedGpio, ButtonGpio, RgbLedGpio, SevenSegGpio;

int InitializeGpio(XGpio *GpioInstance, u16 DeviceId, u32 DirectionMask, u8 Channel) {
    int Status = XGpio_Initialize(GpioInstance, DeviceId);
    if (Status != XST_SUCCESS) {
        return XST_FAILURE;
    }
    XGpio_SetDataDirection(GpioInstance, Channel, DirectionMask);
    return XST_SUCCESS;
}

void ProcessSwitchesAndLeds() {
    u32 switchData = XGpio_DiscreteRead(&SwitchGpio, SWITCH_CHANNEL);
    XGpio_DiscreteWrite(&LedGpio, LED_CHANNEL, switchData);

    // UART output for switch status
    for (int i = 0; i < NUM_SWITCHES; i++) {
        if ((switchData >> i) & 0x1) {
            xil_printf("Switch %d ON\r\n", i);
        } else {
            xil_printf("Switch %d OFF\r\n", i);
        }
    }
}

void ProcessButtonsRgbAndSevenSeg() {
    u32 buttonData = XGpio_DiscreteRead(&ButtonGpio, BUTTON_CHANNEL);
    u32 rgbValue = 0;
    u32 sevenSegValue = 0;

    // Map buttons to RGB values and Seven Segment display
    if (buttonData & 0x1) { // Button 0
        rgbValue = 0x1; // Red
        sevenSegValue = 0x76; // Display 'r' on seven-segment
    } else if (buttonData & 0x2) { // Button 1
        rgbValue = 0x2; // Green
        sevenSegValue = 0x6E; // Display 'g' on seven-segment
    } else if (buttonData & 0x4) { // Button 2
        rgbValue = 0x4; // Blue
        sevenSegValue = 0x77; // Display 'b' on seven-segment
    } else if (buttonData & 0x8) { // Button 3
        rgbValue = 0x7; // White (RGB all on)
        sevenSegValue = 0x3F; // Display '0' (zero) on seven-segment
    }

    XGpio_DiscreteWrite(&RgbLedGpio, RGB_LED_CHANNEL, rgbValue);
    XGpio_DiscreteWrite(&SevenSegGpio, SEVEN_SEG_CHANNEL, sevenSegValue);
}

int main() {
    xil_printf("Multi-Peripheral Control Application\r\n");

    // Initialize GPIO devices
    if (InitializeGpio(&SwitchGpio, SWITCH_DEVICE_ID, 0xFFFFFFFF, SWITCH_CHANNEL) != XST_SUCCESS ||
        InitializeGpio(&LedGpio, LED_DEVICE_ID, 0x00000000, LED_CHANNEL) != XST_SUCCESS ||
        InitializeGpio(&ButtonGpio, BUTTON_DEVICE_ID, 0xFFFFFFFF, BUTTON_CHANNEL) != XST_SUCCESS ||
        InitializeGpio(&RgbLedGpio, RGB_LED_DEVICE_ID, 0x00000000, RGB_LED_CHANNEL) != XST_SUCCESS ||
        InitializeGpio(&SevenSegGpio, SEVEN_SEG_DEVICE_ID, 0x00000000, SEVEN_SEG_CHANNEL) != XST_SUCCESS) {
        xil_printf("GPIO Initialization Failed\r\n");
        return XST_FAILURE;
    }

    while (1) {
        ProcessSwitchesAndLeds();
        ProcessButtonsRgbAndSevenSeg();
    }

    return 0;
}
